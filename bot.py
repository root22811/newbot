import logging
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = "8133450666:AAHlxeZCDit8GO6t1oeVFA0N4ezeaFaTFGQ"
CHANNEL_ID = "@Power_Flower_Applications"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ----- –¢–µ–∫—Å—Ç—ã –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö -----
TEXTS = {
    'ru': {
        'welcome': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:",
        'choose_country': "3Ô∏è‚É£ –í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É?",
        'arrival_date': "4Ô∏è‚É£ –ö–æ–≥–¥–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–µ—Ö–∞—Ç—å –≤ –ü–æ–ª—å—à—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ? (–Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 8 –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è, —Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î)",
        'age': "5Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?",
        'citizenship': "6Ô∏è‚É£ –ö–∞–∫–æ–µ —É –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?",
        'documents': "7Ô∏è‚É£ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É –≤–∞—Å —É–∂–µ –≥–æ—Ç–æ–≤—ã –∏–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å –≤ –ï–≤—Ä–æ–ø—É?",
        'contact': "8Ô∏è‚É£ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, Telegram, WhatsApp –∏ —Ç.–¥.):",
        'thank_you': "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º. –ú—ã —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è!",
        'invalid_date': "‚ùó –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ 8 –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.",
        'job_info': "üá≥üá± –†–ê–ë–û–¢–ê –í –ù–ò–î–ï–†–õ–ê–ù–î–ê–• –ò –ë–ï–õ–¨–ì–ò–ò üáßüá™\n\n–ù–∞–¥—ë–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –ï–≤—Ä–æ–ø–µ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∏ –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π!\n‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ\n‚úÖ –ë–æ–ª–µ–µ 10 –ª–µ—Ç –æ–ø—ã—Ç–∞\n‚úÖ –õ–µ–≥–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É\n...\nüìÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 5‚Äì14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n‚ùó –í—Å—ë –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ. –í–∏–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.\n",
    },
    'ua': {
        'welcome': "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞ –ø—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:",
        'choose_country': "3Ô∏è‚É£ –í —è–∫—É –∫—Ä–∞—ó–Ω—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—É?",
        'arrival_date': "4Ô∏è‚É£ –ö–æ–ª–∏ –≤–∏ –≥–æ—Ç–æ–≤—ñ –ø—Ä–∏—ó—Ö–∞—Ç–∏ –¥–æ –ü–æ–ª—å—â—ñ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è? (–Ω–µ —Ä–∞–Ω—ñ—à–µ –Ω—ñ–∂ —á–µ—Ä–µ–∑ 8 –¥–Ω—ñ–≤ –≤—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ, —Ñ–æ—Ä–º–∞—Ç: –†–†–†–†-–ú–ú-–î–î)",
        'age': "5Ô∏è‚É£ –°–∫—ñ–ª—å–∫–∏ –≤–∞–º –ø–æ–≤–Ω–∏—Ö —Ä–æ–∫—ñ–≤?",
        'citizenship': "6Ô∏è‚É£ –Ø–∫–µ —É –≤–∞—Å –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ?",
        'documents': "7Ô∏è‚É£ –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —É –≤–∞—Å –≤–∂–µ –≥–æ—Ç–æ–≤—ñ –∞–±–æ –≤–∏ —Ç—ñ–ª—å–∫–∏ –ø–ª–∞–Ω—É—î—Ç–µ –ø—Ä–∏—ó—Ö–∞—Ç–∏ –¥–æ –Ñ–≤—Ä–æ–ø–∏?",
        'contact': "8Ô∏è‚É£ –ó–∞–ª–∏—à—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, WhatsApp —Ç–æ—â–æ):",
        'thank_you': "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º. –ú–∏ –∑ –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ–º–æ—Å—å!",
        'invalid_date': "‚ùó –î–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ –Ω–µ —Ä–∞–Ω—ñ—à–µ –Ω—ñ–∂ —á–µ—Ä–µ–∑ 8 –¥–Ω—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î.",
        'job_info': "üá≥üá± –†–û–ë–û–¢–ê –í –ù–Ü–î–ï–†–õ–ê–ù–î–ê–• –Ü –ë–ï–õ–¨–ì–Ü–á üáßüá™\n\n–ù–∞–¥—ñ–π–Ω–∞ —Ä–æ–±–æ—Ç–∞ –≤ –Ñ–≤—Ä–æ–ø—ñ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º!\n‚úÖ –õ—ñ—Ü–µ–Ω–∑–æ–≤–∞–Ω–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ\n‚úÖ 10+ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É\n‚úÖ –õ–µ–≥–∞–ª—å–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º\n...\nüìÖ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: 5‚Äì14 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤\n‚ùó –í—Å–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ. –í—ñ–∑–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞.\n",
    }
}

# ----- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã -----
class Form(StatesGroup):
    country = State()
    arrival_date = State()
    age = State()
    citizenship = State()
    documents = State()
    contact = State()

# ----- /start -----
@dp.message_handler(commands='start')
async def start_cmd(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_ua")
    )
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=kb)

# ----- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ -----
@dp.callback_query_handler(lambda c: c.data.startswith("lang_"))
async def set_language(callback_query: types.CallbackQuery, state: FSMContext):
    lang = callback_query.data.split("_")[1]
    await state.update_data(lang=lang)

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É / –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data="fill_form"))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, TEXTS[lang]['welcome'], reply_markup=kb)

# ----- –ü–æ–∫–∞–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π -----
@dp.callback_query_handler(lambda c: c.data == "fill_form")
async def show_job_info(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üñä –í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ / –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ", callback_data="start_survey"))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, TEXTS[lang]['job_info'], reply_markup=kb)

# ----- –ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã -----
@dp.callback_query_handler(lambda c: c.data == "start_survey")
async def ask_country(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã ‚Äì –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑.", callback_data="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã - –°–•"),
        InlineKeyboardButton("üáßüá™ –ë–µ–ª—å–≥–∏—è ‚Äì –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", callback_data="–ë–µ–ª—å–≥–∏—è - –°—Ç—Ä–æ–π–∫–∞")
    )
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, TEXTS[lang]['choose_country'], reply_markup=kb)
    await Form.country.set()

@dp.callback_query_handler(state=Form.country)
async def ask_arrival(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(country=callback_query.data)
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")

    await bot.send_message(callback_query.from_user.id, TEXTS[lang]['arrival_date'])
    await Form.arrival_date.set()

@dp.message_handler(state=Form.arrival_date)
async def ask_age(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")

    try:
        input_date = datetime.strptime(message.text.strip(), "%Y-%m-%d").date()
        min_date = datetime.now().date() + timedelta(days=8)
        if input_date < min_date:
            raise ValueError
    except ValueError:
        await message.answer(TEXTS[lang]['invalid_date'])
        return

    await state.update_data(arrival_date=str(input_date))
    await message.answer(TEXTS[lang]['age'])
    await Form.age.set()

@dp.message_handler(state=Form.age)
async def ask_citizenship(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")

    await message.answer(TEXTS[lang]['citizenship'])
    await Form.citizenship.set()

@dp.message_handler(state=Form.citizenship)
async def ask_documents(message: types.Message, state: FSMContext):
    await state.update_data(citizenship=message.text)
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")

    await message.answer(TEXTS[lang]['documents'])
    await Form.documents.set()

@dp.message_handler(state=Form.documents)
async def ask_contact(message: types.Message, state: FSMContext):
    await state.update_data(documents=message.text)
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")

    await message.answer(TEXTS[lang]['contact'])
    await Form.contact.set()

@dp.message_handler(state=Form.contact)
async def finish_form(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    lang = data.get("lang", "ru")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É
    summary = (
        f"üì• –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
        f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {data['arrival_date']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üõÇ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {data['citizenship']}\n"
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {data['documents']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contact']}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(CHANNEL_ID, summary)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(TEXTS[lang]['thank_you'])
    await state.finish()

# ----- –ó–∞–ø—É—Å–∫ -----
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
