import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from questionnaire import JobForm

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="start_form")]
    ])
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É:", reply_markup=kb)

# –°—Ç–∞—Ä—Ç —Ñ–æ—Ä–º—ã
@dp.callback_query(F.data == "start_form")
async def show_info(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>üá≥üá± –†–ê–ë–û–¢–ê –í –ù–ò–î–ï–†–õ–ê–ù–î–ê–• –ò –ë–ï–õ–¨–ì–ò–ò üáßüá™</b>\n"
        "–ù–∞–¥—ë–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –ï–≤—Ä–æ–ø–µ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∏ –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ!\n"
        "–ö–æ–º–ø–∞–Ω–∏—è ¬´–°—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã II¬ª ‚Äî —ç—Ç–æ:\n"
        "‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ\n"
        "‚úÖ –û–ø—ã—Ç –±–æ–ª–µ–µ 10 –ª–µ—Ç\n"
        "‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã\n"
        "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
        "üå∑ <b>–í–ê–ö–ê–ù–°–ò–ò:</b>\n"
        "‚Äî –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã (—Ü–≤–µ—Ç—ã, –∫–∞–ø—É—Å—Ç–∞, –ª—É–∫)\n"
        "‚Äî –ë–µ–ª—å–≥–∏—è (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ)\n"
        "üìÑ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "üí¨ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω\n"
        "üë´ –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –∂–µ–Ω—â–∏–Ω –¥–æ 45, –º—É–∂—á–∏–Ω –¥–æ 50, –ø–∞—Ä—ã\n"
        "üí∞ –ó–ü: –æ—Ç 21,62 z≈Ç (–ü–æ–ª—å—à–∞) –∏ 14,06 ‚Ç¨ (–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã)\n"
        "‚ùó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ. –ü–æ –≤–∏–∑–µ. –ë–µ–∑–æ–ø–∞—Å–Ω–æ.\n",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëâ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="form_country")]
        ])
    )

# –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
@dp.callback_query(F.data == "form_country")
async def ask_country(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã ‚Äî –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", callback_data="nl_agro")],
        [InlineKeyboardButton(text="üáßüá™ –ë–µ–ª—å–≥–∏—è ‚Äî –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", callback_data="be_construction")]
    ])
    await callback.message.answer("3Ô∏è‚É£ –í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É?", reply_markup=kb)

@dp.callback_query(F.data.in_({"nl_agro", "be_construction"}))
async def country_selected(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(country=callback.data)
    await callback.message.answer("4Ô∏è‚É£ –ö–æ–≥–¥–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–µ—Ö–∞—Ç—å –≤ –ü–æ–ª—å—à—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?\n(–Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 8 –¥–Ω–µ–π)")
    await state.set_state(JobForm.arrival_date)

@dp.message(JobForm.arrival_date)
async def ask_age(message: types.Message, state: FSMContext):
    await state.update_data(arrival_date=message.text)
    await message.answer("5Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?")
    await state.set_state(JobForm.age)

@dp.message(JobForm.age)
async def ask_citizenship(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("6Ô∏è‚É£ –ö–∞–∫–æ–µ —É –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?")
    await state.set_state(JobForm.citizenship)

@dp.message(JobForm.citizenship)
async def ask_documents(message: types.Message, state: FSMContext):
    await state.update_data(citizenship=message.text)
    await message.answer("7Ô∏è‚É£ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É –≤–∞—Å —É–∂–µ –≥–æ—Ç–æ–≤—ã –∏–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å –≤ –ï–≤—Ä–æ–ø—É?")
    await state.set_state(JobForm.documents)

@dp.message(JobForm.documents)
async def ask_contact(message: types.Message, state: FSMContext):
    await state.update_data(documents=message.text)
    await message.answer("8Ô∏è‚É£ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, WhatsApp):")
    await state.set_state(JobForm.contact)

@dp.message(JobForm.contact)
async def form_complete(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    country_map = {
        "nl_agro": "üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã ‚Äî –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ",
        "be_construction": "üáßüá™ –ë–µ–ª—å–≥–∏—è ‚Äî –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
    }

    result = (
        "<b>üì® –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</b>\n\n"
        f"<b>–°—Ç—Ä–∞–Ω–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {country_map.get(data['country'], '‚Äî')}\n"
        f"<b>–î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞:</b> {data['arrival_date']}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data['age']}\n"
        f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {data['citizenship']}\n"
        f"<b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b> {data['documents']}\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {data['contact']}"
    )

    await bot.send_message(CHANNEL_ID, result)
    await message.answer("‚úÖ 9Ô∏è‚É£ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")
    await state.clear()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    import asyncio

    async def main():
        await dp.start_polling(bot)

    asyncio.run(main())